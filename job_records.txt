# Use MIX to train---Hope to get better depth.
99956  unfzD_MIX_b3accu1_poseScratchSeperateResnet_depthScratchDAM_motionRAFTFlow_allRegLoss_doubleB


#
99901 unfzD_000_b3accu1_posePCRnet_detachdepth_e2e2_iter1_depthScratchDAM_motionRAFTFlow_allRegLoss_doubleB


#final models
af-sfm(resnet pose) + damTuning + MM
99851(depth gone)(99853 b3accu1) 000 MFraft_PFresnet_DscratchDAM_all_the_motion_design + b1_accu3---expect works nicely on dynamic img
X99852 (raft nan issue; stopped; replace with Dftflow X99854; also have nan issue) scared MFraft_PFresnet_DscratchDAM_all_the_motion_design + b1_accu3---expect being better than dares 

#best doubleB+reloc3r+resumeD  flow supervised with gt_Raw  b1acc3

x 99848 pcrnet using best setting (b3_accu1)

(to be check)99849 165848 pcrnet using best setting + scratchD + Dscale1 (b1_accu3)---depth gone
(to be check)X99842 pcrnet using best setting  + resumeD + Dscale100 (b1_accu3)--depth none; depth scale get insane big

colored_MotionCorrected_loss2nomo_000_unfzD_b1_accu3_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_doubleB_resumeD_pcrnete2e2iter1_detachD_100D
99444(aacidently ruin due to missing saved model...cancel ) our net with best setting
best doubleB+reloc3r+resumeD  flow supervised with gt_Raw  b1acc3 


# verify pcrnet under our motion SSL framework: batchsize 3; using default OFnet(raft have nan risk for static scared scene)
99747 unfzD_SCARED_posePCRnet_detachdepth_e2e2_iter1_depthScratchDAM_motionDftFlow_allRegLoss_doubleB
replace with dyna000
99748 unfzD_000_posePCRnet_detachdepth_e2e2_iter1_depthScratchDAM_motionRAFTFlow_allRegLoss_doubleB


# think of reattention during offline use?---only then we have motion mask....
# think of masked pose net as input

# fix PF multi level bug
////best fast3r+doubleB
99306(done) colored_MotionCorrected_loss2nomo_000_unfzD_b3_accu1_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_doubleB_scratch_fixPFbug_resumeTrainedDAM
////best fast3r+doubleB b1accu3 quicker
99444 colored_MotionCorrected_loss2nomo_000_unfzD_b1_accu3_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_doubleB_scratch_fixPFbug_resumeTrainedDAM_quick
////geoaware_net
99308 colored_MotionCorrected_loss2nomo_000_unfzD_b3_accu1_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_doubleB_geoaware32_40Wfast3rPose_scratch_fixPFbug_resumeTrainedDAM
////geoaware_net_b1accu3: (failed due to seme sample contain nan flow) 
99443 colored_MotionCorrected_loss2nomo_000_unfzD_b1_accu3_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_doubleB_geoaware32_40Wfast3rPose_scratch_fixPFbug_resumeTrainedDAM_quick


////geoaware_net
98159: 95580 + soft_mask colored_MotionCorrected_loss2nomo_000_unfzD_b3_accu1_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_doubleB_geoaware32_40Wfast3rPose_softmask_scratch
95579: 95444 + freezedepth+use_32,40(scale 3)_geoawarenet_with_fast3r_head_adaptation, keep grad in disp
95580(okay): 95444 + use_32,40(scale 3)_geoawarenet_with_fast3r_head_adaptation; keep grad in disp


clear: A''  shared
95397 colored_MotionCorrected_loss2nomo_101_unfzD_b4_accu1_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_doubleA_scratch
B'' b1_accu4:(best by far)
95444  colored_MotionCorrected_loss2nomo_101_unfzD_b3_accu1_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_doubleB_scratch
(95399 b11 accu4 version) colored_MotionCorrected_loss2nomo_101_unfzD_b1_accu4_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_doubleB_scratch
B'' b1_accu4+mutual:(a100)
95402(95404 b1accu4 version) colored_MotionCorrected_loss2nomo_101_unfzD_b4_accu1_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_doubleB_mutual_scratch
B'' b1_accu4+NOshared:(best by far)
95403 colored_MotionCorrected_loss2nomo_101_unfzD_b1_accu4_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_NOsharedMOF_doubleB_scratch


F A b1_accu4:
95400 colored_MotionCorrected_loss2nomo_101_unfzD_b1_accu4_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_A_scratch
F A+mutual b1_accu4:
95401 colored_MotionCorrected_loss2nomo_101_unfzD_b1_accu4_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_A_mutual_scratch

solve_MF_issue_from_root_debug have issue: tgt to src motion? start with target?
learn 3D MF?
REG: mf+pf=of
disp2depth

#fix by inverse MF computation order and negative pose_flow once used
95363 woShard. quickbugfix. A''''
OF_8. the same setting as the above. 95367
OF_8. the same but shared OF net. 95358

# wrong motion_flow before and include 95357
x95345: full.  A+redfMF b1accu4
x95347: OF 8  A+redfMF colored_MotionCorrected_loss2nomo_000_unfzD_OF8_b1_accu4_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_A_redefMF
x95346: OF 8  A'''(internnally redef) colored_MotionCorrected_loss2nomo_000_unfzD_OF8_b1_accu4_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet_sharedMOF_A_triple_prime
95357: OF 8  A''''+redef+no_shared (enforce mf supervise in loss_reproj_ori)

! motion_flow and motion_mask ?: the base ref is changed? w.r.t src or color?


A:95318
A'':95317

pose_err reduce for static img with original method/ours?
offline eval?
error_map?
check how the scaled depth and pose is setted up in the suppliments? checked, not well addressed. Hard reset depth scale--the learned pose scale is improper.
enforce consistency via mutiple paird input or design map_latent when enbale mutual is on?
predict_MM and reg_enforce_motion_flow_non_masked_area to be zero?---addtionally supervise of the pose.
AF_coorect_masked_mutual_is_safe? Yeah? the OF can be imperfect leading to bad register, do not risk applying bad refine img.

OF: seems sample color from MF to get corrected color more robust than--warp PF+MF to get corrected color
pose_flow is obtained in noisy state, considering the disp2depth func w.r.t T, the depth are badly supervised.
disp_to_depth? the scales for depth and pose are related
enable_mutual(so that depth is computed for all the 3 imgs)+ST_head+ST_loss?---depth anything paper
unidepth v2 paper? disambigulate pose flow and motion flow grad flow.
use learned map latent? 3D mixer concept.
reg_pose_flow? the same_color_tone_no_need?


the 95282 A is not properly stopped, still running.
!!! the disp2dpeth func can be a bootleneck

!!!
3_method_to_obtain_color_correction?: A for the 1st time bring pose_err, but the depth get badly affect due to the noisy required pose_flow, now try 
A.Src_img+(PF+MF.detach())  B.color+(MF.detach()) C. color.detach+MF D.color+(MF)
reg_PF_From_DandT  and PF_from_OF_and_MF?


train_MF_net? Yes. For the 1st time have chance to get reduced pose err.
Shared_MF_OF? Yes, it is critical to avoid the MF being absurd---loss_0 will constraint it anyway.
raft proof to be better? Yes
OF_curve pose reduced for dyn? Yes
reg_mag_motion_flow and motion_mask? Yes, Works if not using_MF(not sure effect when use_MF)---which to detach(either is okay as mask is gen from MF--this term can be removed if we use_MF_net?)? detach_motion_mask? function: avoid being lazy(especially when not use_MF_net)
loss_reproj_2? Yes, critial for supervise of the pose flow togther with effective motion_mask_with_grad
loss_reproj(with motion correction) might be redundant with use loss_repoj_2?
unfzD is necessary in the end? Yes. 
ignore_motion_area_at_calib? Only safer(as a lot are supervised with refined_tgt) but improper(try to turn off later) --as we use registered img to calibrate.

implement shared_MF_net? Did not verify but should be helpful, and take as default. ---Avoid the MF net being too free.
test if diff poser can OF properly?



05.Sep: when 000=>010  reproj_err reduced further; pose err remains.
the pose_flow, consequently motin_flow are neither good.
(Done)95182: use seperate raft_like network to predict motion flow
colored_MotionCorrected_loss2nomo_000_fzD_b4_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet
95256_b3: 95182+unfzD
(OOM)95224: 95182+unfzD
colored_MotionCorrected_loss2nomo_000_unfzD_b4_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_useMFnet



04.Sep: RAFT looks much better; we check all the vis--as we expected; but only rare cases when tool move fast--failed anyway
95012: pose_err not reduce; verify if the dataset issue: tool_motion break the OF application case
colored_MotionCorrected_loss2nomo_000_fzD_b4_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup_raft_010
XXX95181: use 011. Sanity_for_sure_should_reduce.  Nan. Why?

#////////////////////////////////
03.Sep: inspect calib process; 
fzD; loss_0_using_gt_supervision; binarymask; regMask_on
94924(10h) --model_name colored_MotionCorrected_loss2nomo_000_fzD_b4_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup \
OF seems in low accuracy: 94924+Raft OF, inspect if OF arch is a bottlneck.
94927(10h) --model_name colored_MotionCorrected_loss2nomo_000_fzD_b4_hardmask_RegMask_ignoreMotionAreaAtCalib_OFgtSup \


02.Sep: unfz still not work despite with improved motion_mask_reg; refined_img_have_issue! Bimask > Gray_mask

94513 (94519 b1 version)colored_MotionCorrected_loss2nomo_000_fzD_b4_softmaskRegMF_contrasiveFlowMag_correct: soft+MF_reg+New_flow_mag_norm + fz
x94514 (94522 94526 b1 version) colored_MotionCorrected_loss2nomo_000_unfzD_b4_hardmaskRegMF_contrasiveFlowMag_correct: soft+MF_reg+New_flow_mag_norm (more step further)

#loss priority only if 94513 works: baseline
X94527 colored_MotionCorrected_loss2nomo_000_fzD_b4_hardRegMF_contrasiveFlowMag_baseline: hard+MF_reg+New_flow_mag_norm + fz



94473 b1 quick_trn: see if the soft motion mask is making sense: 
    colored_MotionCorrected_loss2nomo_000_fzD_b1_accu4_softmaskRegMF_correct is making sense. colored_MotionCorrected_loss2nomo_000_unfzD_b1_accu4_softmaskRegMF_correct
/////colored_MotionCorrected_loss2nomo_000_unfzD_b4_softmaskRegPF_correct: 94466(10h) 94452(15h) a100



31.Aug

/////colored_MotionCorrected_loss2nomo_000_fzD_b4_softmaskReg_correct: 94231(15h) a100
/////colored_MotionCorrected_loss2nomo_000_unfzD_b4_softmaskReg_correct: 94234(15h) a100

# we expect to unfreeze depth with the help of reg term
/////colored_MotionCorrected_loss2nomo_000_fzD_b4(wrongname_actualb1)_accu4_softmaskReg_correct: X94232 v100 quick results
/////colored_MotionCorrected_loss2nomo_000_unfzD_b4(wrongname_actualb1)_accu4_softmaskReg_correct: X94233 v100 quick results


/////colored_MotionCorrected_loss2nomo_000_fzD_b1_correct: 93977  b1_accu4 93865+freeze_depth# quick resullts
/////colored_MotionCorrected_loss2nomo_000_fzD_b4_correct:  X93972(20h. alright but the pose_err can not further reduced after iter 4k) 93995(4h)  93865+freeze_depth
/////colored_MotionCorrected_loss2nomo_000_fzD_b4(wrongly named, we forget enable loss2): 93923(2h)  92405+freeze_depth

/////colored_MotionCorrected_loss2nomo_000_b1: 93876  v100 use addtionaly loss_reprj2 on static area only
/////colored_MotionCorrected_loss2nomo_000_b4: 93865 use addtionaly loss_reprj2 on static area only--still depth zero
/////colored_MotionCorrected_woAF_dynascared_000_b4: 93663  a100---still depth became zeor--not batch_size_issue

/////colored_MotionCorrected_woAF_dynascared_000: 93580  batch_size 4 a100

30.Aug 

Motion_EXPx: need good OF
Motion_EXP1: 
/////colored_MotionCorrected_woAF_dynascared_000: 92403  batch_size 1 rtxa5000
    options.enable_motion_computation = True
    options.reproj_supervised_which = "color_MotionCorrected"
    options.reproj_supervised_with_which = "raw_tgt_gt"
    options.flow_reproj_supervised_with_which = "raw_tgt_gt"
    options.transform_constraint = 0.0
    options.transform_smoothness = 0.0
-expect solved the motion properly for the first time by using 'color_MotionCorrected'
-do not consider AF yet
/////colored_MotionCorrected_dynascared_000: 92405  batch_size 1 rtxa5000
    options.enable_motion_computation = True
    options.reproj_supervised_which = "color_MotionCorrected"
-better than the above baseline in term of AF

////TODO:
DUST3R with pts3d + diffposer/Marepo_head
DUST3R with shared opticflow?
Video_depth
video depth injection to DPT

////TODO:
eval_code on traj.


90487 fast3r_retrained: /mnt/ceph/tco/TCO-Staff/Homes/jinjing/slurm_out --num_epochs 10 --batch_size 4 --log_frequency 200 
90584 fast3r_dynascared_000: /mnt/ceph/tco/TCO-Staff/Homes/jinjing/slurm_out --num_epochs 10 --batch_size 4 --log_frequency 200 

# help motion mask gen
get_texu_mask